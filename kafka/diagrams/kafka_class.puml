@startuml Kafka Class Diagram

class KafkaConfig {
  +Brokers []string
  +Topic string
  +GroupID string
  +ClientID string
  +NumPartitions int
  +ReplicationFactor int
  +RetentionPeriod time.Duration
  +RetentionSize int64
  +MaxRetries int
  +RetryBackoff time.Duration
  +EnableIdempotence bool
  +AutoCommit bool
  +CommitInterval time.Duration
  +AsyncProducer bool
  +AsyncConsumer bool
  +ConsumerConcurrency int
}

class Producer {
  -writer *kafka.Writer
  -config *KafkaConfig
  +NewProducer(config *KafkaConfig) *Producer
  +Produce(ctx context.Context, key, value []byte) error
  +ProduceAsync(ctx context.Context, key, value []byte)
  +ProduceBatch(ctx context.Context, messages []kafka.Message) error
  +ProduceBatchAsync(ctx context.Context, messages []kafka.Message)
  +Close() error
}

class Consumer {
  -reader *kafka.Reader
  -config *KafkaConfig
  -uncommitted []kafka.Message
  -lastCommit time.Time
  -stopCommit chan struct{}
  -commitWg sync.WaitGroup
  -autoCommitter bool
  -commitMutex sync.Mutex
  -stopConsume chan struct{}
  -isConsuming bool
  -consumeWg sync.WaitGroup
  +NewConsumer(config *KafkaConfig) *Consumer
  +Consume(ctx context.Context, handler MessageHandler) error
  +ConsumeAsync(ctx context.Context, handler MessageHandler, concurrency int) error
  +StopConsumeAsync()
  -commitOffsets(ctx context.Context) error
  -autoCommitLoop()
  +Close() error
}

interface MessageHandler {
  +func(msg kafka.Message) error
}

note "Topic Management Functions" as TopicNote
note "CreateTopic(ctx context.Context, config *KafkaConfig) error" as CreateNote
note "DeleteTopic(ctx context.Context, config *KafkaConfig) error" as DeleteNote

KafkaConfig <-- Producer : uses
KafkaConfig <-- Consumer : uses
Consumer --> MessageHandler : calls
TopicNote .. CreateNote
TopicNote .. DeleteNote
KafkaConfig <.. TopicNote : uses

@enduml 